<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Functional.Maybe</name>
    </assembly>
    <members>
        <member name="T:Functional.Maybe.Maybe`1">
            <summary>
            The option type; explicitly represents nothing-or-thing nature of a value. 
            Supports some of the LINQ operators, such as SelectMany, Where and can be used 
            with linq syntax: 
            </summary>
            <example>
            // gets sum of the first and last elements, if they are present, orelse «-5»; 
            
            Maybe&lt;int&gt; maybeA = list.FirstMaybe();
            Maybe&lt;int&gt; maybeB = list.LastMaybe();
            int result = (
            	from a in maybeA
            	from b in maybeB
            	select a + b
            ).OrElse(-5);
            
            // or shorter:
            var result = (from a in list.FirstMaybe() from b in list.LastMaybe() select a + b).OrElse(-5);
            </example>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Functional.Maybe.Maybe`1.Nothing">
            <summary>
            Nothing value.
            </summary>
        </member>
        <member name="M:Functional.Maybe.Maybe`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Functional.Maybe.Maybe`1.op_Implicit(Functional.Maybe.Maybe{Functional.Maybe.Maybe{`0}})~Functional.Maybe.Maybe{`0}">
            <summary>
            Automatical flattening of the monad-in-monad
            </summary>
            <param name="doubleMaybe"></param>
            <returns></returns>
        </member>
        <member name="P:Functional.Maybe.Maybe`1.Value">
            <summary>
            The value, stored in the monad. Can be accessed only if is really present, otherwise throws
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if not value is present</exception>
        </member>
        <member name="P:Functional.Maybe.Maybe`1.HasValue">
            <summary>
            The flag of value presence
            </summary>
        </member>
        <member name="T:Functional.Maybe.MaybeBoolean">
            <summary>
            Ternary logic with Maybe&lt;bool&gt; and combining T and bool to a Maybe value
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeBoolean.Then``1(System.Boolean,System.Func{``0})">
            <summary>
            If <paramref name="condition"/> returns <paramref name="f"/>() as Maybe, otherwise Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeBoolean.Then``1(System.Boolean,``0)">
            <summary>
            If <paramref name="condition"/> returns <paramref name="t"/> as Maybe, otherwise Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeBoolean.DoWhenTrue(Functional.Maybe.Maybe{System.Boolean},System.Action)">
            <summary>
            Calls <paramref name="fn"/> if <paramref name="m"/> is true.ToMaybe()
            </summary>
            <param name="m"></param>
            <param name="fn"></param>
        </member>
        <member name="T:Functional.Maybe.MaybeCompositions">
            <summary>
            Composing two maybe value to one, such operations, as one.Or(another)
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeCompositions.Or``1(Functional.Maybe.Maybe{``0},``0)">
            <summary>
            Returns <paramref name="a"/> if its Value exists or returns <paramref name="b"/>, wrapped as Maybe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeCompositions.Or``1(Functional.Maybe.Maybe{``0},System.Func{Functional.Maybe.Maybe{``0}})">
            <summary>
            Returns <paramref name="a"/> if its Value exists or returns <paramref name="b"/>()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeCompositions.Or``1(Functional.Maybe.Maybe{``0},Functional.Maybe.Maybe{``0})">
            <summary>
            Returns <paramref name="a"/> if its Value exists or returns <paramref name="b"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeCompositions.Compose``2(Functional.Maybe.Maybe{``0},Functional.Maybe.Maybe{``1})">
            <summary>
            Returns <paramref name="b"/> if <paramref name="a"/> has value, otherwise <see cref="F:Functional.Maybe.Maybe`1.Nothing"/>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeCompositions.Collapse``1(Functional.Maybe.Maybe{Functional.Maybe.Maybe{``0}})">
            <summary>
            Collapses nested maybes to a flat one
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeCompositions.Flatten``1(Functional.Maybe.Maybe{``0},System.Func{``0,Functional.Maybe.Maybe{``0}})">
            <summary>
            Flattens a recursive Maybe structure into IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maybe"></param>
            <param name="parentSelector"></param>
            <example>
            Having { a: 1, parent: { a: 2, parent: { a: 3, parent: Nothing } } } 
            We can flatten it to 
            [
            	{ a: 1, parent: { a: 2, parent: { a: 3, parent: Nothing } } }, 
            	{ a: 2, parent: { a: 3, parent: Nothing } } , 
            	{ a: 3, parent: Nothing } 
            ]
            </example>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeConvertions">
            <summary>
            Fluent exts for converting the values of Maybe to/from lists, nullables; casting and upshifting
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeConvertions.Cast``2(Functional.Maybe.Maybe{``0})">
            <summary>
            If <paramref name="a"/>.Value exists and can be successfully casted to <typeparamref name="TB"/>, returns the casted one, wrapped as Maybe&lt;TB&gt;, otherwise Nothing
            </summary>
            <typeparam name="TA"></typeparam>
            <typeparam name="TB"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeConvertions.MaybeCast``2(``0)">
            <summary>
            If <paramref name="a"/> can be successfully casted to <typeparamref name="TR"/>, returns the casted one, wrapped as Maybe&lt;TR&gt;, otherwise Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeConvertions.ReturnList``1(Functional.Maybe.Maybe{``0})">
            <summary>
            If <paramref name="a"/>.Value is present, returns a list of that single value, otherwise an empty list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeConvertions.ToMaybeFromList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If <paramref name="xs"/> contains any items, returns first one wrapped as Maybe, elsewhere returns Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeConvertions.ToNullable``1(Functional.Maybe.Maybe{``0})">
            <summary>
            Converts Maybe to corresponding Nullable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeConvertions.ToMaybe``1(System.Nullable{``0})">
            <summary>
            Converts Nullable to corresponding Maybe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeConvertions.ToMaybe``1(``0)">
            <summary>
            Returns <paramref name="a"/> wrapped as Maybe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeDictionary.Lookup``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to get value from Dictionary safely
            </summary>
            <typeparam name="TK"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeEnumerable">
            <summary>
            Integration with Enumerable's LINQ (such as .FirstMaybe()) and all kinds of cross-use of IEnumerables and Maybes
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.FirstMaybe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            First item or Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.FirstMaybe``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            First item matching <paramref name="predicate"/> or Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.SingleMaybe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Single item or Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.SingleMaybe``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Single item matching <paramref name="predicate"/> or Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.LastMaybe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Last item or Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.LastMaybe``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Last item matching <paramref name="predicate"/> or Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.FromMaybe``1(Functional.Maybe.Maybe{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns the value of <paramref name="maybeCollection"/> if exists orlse an empty collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maybeCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.Select``2(System.Collections.Generic.IEnumerable{Functional.Maybe.Maybe{``0}},System.Func{``0,``1})">
            <summary>
            For each items that has value, applies <paramref name="selector"/> to it and wraps back as Maybe, for each otherwise remains Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="maybes"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.WholeSequenceOfValues``1(System.Collections.Generic.IEnumerable{Functional.Maybe.Maybe{``0}})">
            <summary>
            If all the items have value, unwraps all and returns the whole sequence of <typeparamref name="T"/>, wrapping the whole as Maybe, otherwise returns Nothing 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maybes"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.WhereValueExist``1(System.Collections.Generic.IEnumerable{Functional.Maybe.Maybe{``0}})">
            <summary>
            Filters out all the Nothings, unwrapping the rest to just type <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maybes"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.SelectWhereValueExist``2(System.Collections.Generic.IEnumerable{Functional.Maybe.Maybe{``0}},System.Func{``0,``1})">
            <summary>
            Filters out all the Nothings, unwrapping the rest to just type <typeparamref name="T"/> and then applies <paramref name="fn"/> to each
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="maybes"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.AnyNothing``1(System.Collections.Generic.IEnumerable{Functional.Maybe.Maybe{``0}})">
            <summary>
            Checks if any item is Nothing 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maybes"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.WhereAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Functional.Maybe.Maybe{System.Boolean}})">
            <summary>
            If ALL calls to <paramref name="pred"/> returned a value, filters out the <paramref name="xs"/> based on that values, otherwise returns Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeEnumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Functional.Maybe.Maybe{System.Boolean}})">
            <summary>
            Filters out <paramref name="xs"/> based on <paramref name="pred"/> resuls; Nothing considered as False
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xs"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeFunctionalWrappers">
            <summary>
            Modifying passed functions making them return Maybe instead of plain type
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeFunctionalWrappers.Wrap``2(Functional.Maybe.MaybeFunctionalWrappers.TryGet{``0,``1})">
            <summary>
            Converts a stardard tryer function (like int.TryParse, Dictionary.TryGetValue etc.) to a function, returning Maybe
            </summary>
            <typeparam name="TR"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="tryer"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeFunctionalWrappers.Catcher``3(System.Func{``0,``1})">
            <summary>
            Returns a function which calls <paramref name="f"/>, wrapped inside a try-catch clause with <typeparamref name="TEx"/> catched. 
            That new function returns Nothing in the case of the <typeparamref name="TEx"/> thrown inside <paramref name="f"/>, otherwise it returns the f-result as Maybe
            </summary>
            <typeparam name="TA"></typeparam>
            <typeparam name="TR"></typeparam>
            <typeparam name="TEx"></typeparam>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeFunctionalWrappers.TryGet`2">
            <summary>
            Delegate matching usual form of the TryParse methods, such as int.TryParse
            </summary>
            <typeparam name="TR"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeLinq">
            <summary>
            Providing necessary methods to enable linq syntax with Maybes themselves
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeLinq.Select``2(Functional.Maybe.Maybe{``0},System.Func{``0,``1})">
            <summary>
            If <paramref name="a"/> has value, applies <paramref name="fn"/> to it and returns the result as Maybe, otherwise returns Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="a"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeLinq.SelectOrElse``2(Functional.Maybe.Maybe{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            If <paramref name="a"/> has value, applies <paramref name="fn"/> to it and returns the result, otherwise returns <paramref name="else"/>()
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="a"></param>
            <param name="fn"></param>
            <param name="else"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeLinq.Where``1(Functional.Maybe.Maybe{``0},System.Func{``0,System.Boolean})">
            <summary>
            If <paramref name="a"/> has value, and it fulfills the <paramref name="predicate"/>, returns <paramref name="a"/>, otherwise returns Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeLinq.SelectMany``2(Functional.Maybe.Maybe{``0},System.Func{``0,Functional.Maybe.Maybe{``1}})">
            <summary>
            If <paramref name="a"/> has value, applies <paramref name="fn"/> to it and returns, otherwise returns Nothing
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="a"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeLinq.SelectMany``3(Functional.Maybe.Maybe{``0},System.Func{``0,Functional.Maybe.Maybe{``1}},System.Func{``0,``1,``2})">
            <summary>
            If <paramref name="a"/> has value, applies <paramref name="fn"/> to it, and if the result also has value, calls <paramref name="composer"/> on both values 
            (original and fn-call-resulted), and returns the <paramref name="composer"/>-call result, wrapped in Maybe. Otherwise returns nothing.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TTempResult"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="a"></param>
            <param name="fn"></param>
            <param name="composer"></param>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeReturns">
            <summary>
            Fluent exts for unwrapping values from the Maybe
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeReturns.ReturnToString``1(Functional.Maybe.Maybe{``0},System.String)">
            <summary>
            Returns <paramref name="a"/>.Value.ToString() or <paramref name="default"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeReturns.OrElse``1(Functional.Maybe.Maybe{``0},System.Func{System.Exception})">
            <summary>
            Returns <paramref name="a"/>.Value or throws <paramref name="e"/>()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeReturns.OrElse``1(Functional.Maybe.Maybe{``0},System.Func{``0})">
            <summary>
            Returns <paramref name="a"/>.Value or returns <paramref name="default"/>()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeReturns.OrElseDefault``1(Functional.Maybe.Maybe{``0})">
            <summary>
            Returns <paramref name="a"/>.Value or returns default(<typeparamref name="T"/>)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeReturns.OrElse``1(Functional.Maybe.Maybe{``0},``0)">
            <summary>
            Returns <paramref name="a"/>.Value or returns <paramref name="default"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeSideEffects">
            <summary>
            Applying side effects into the Maybe call chain
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeSideEffects.Do``1(Functional.Maybe.Maybe{``0},System.Action{``0})">
            <summary>
            Calls <paramref name="fn"/> if <paramref name="m"/> has value, otherwise does nothing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="m"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeSideEffects.Match``1(Functional.Maybe.Maybe{``0},System.Action{``0},System.Action)">
            <summary>
            Calls <paramref name="fn"/> if <paramref name="m"/> has value, otherwise calls <paramref name="else"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="m"></param>
            <param name="fn"></param>
            <param name="else"></param>
            <returns></returns>
        </member>
        <member name="T:Functional.Maybe.MaybeSomethingNothingHelpers">
            <summary>
            IsSomething, IsNothing and shorthands to create typed Nothing of correct type
            </summary>
        </member>
        <member name="M:Functional.Maybe.MaybeSomethingNothingHelpers.IsSomething``1(Functional.Maybe.Maybe{``0})">
            <summary>
            Has a value inside
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeSomethingNothingHelpers.IsNothing``1(Functional.Maybe.Maybe{``0})">
            <summary>
            Has no value inside
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeSomethingNothingHelpers.NothingOf``1(Functional.Maybe.Maybe{``0})">
            <summary>
            Создает "ничто" такого же типа, как исходный объект
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:Functional.Maybe.MaybeSomethingNothingHelpers.NothingOf``1(``0)">
            <summary>
            Создает "ничто" такого же типа, как исходный объект
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
    </members>
</doc>
